#!/usr/bin/env python
#coding:utf-8
"""
  Author:  Wusf --<wushifan221@gmail.com>
  Purpose: 
  Created: 2016/5/4
"""

import os,numpy
import sqlite3 as lite
from ConfigParser import ConfigParser
import threading
lock = threading.Lock()

import Tools.GetLocalDatabasePath as GetPath
import Tools.GetTradeDays as GetTrdDay
import UpdateFactorDatabase.TechnicalFactors._CalculateFactorValues as CalcFactorVals
import InvestmentUniverse.GetIndexConstituentStocks as GetIndexConstituentStocks
import Tools.LogOutputHandler as LogHandler
import Configs.RootPath as Root
RootPath = Root.RootPath


########################################################################
class ComputeFactorValues(object):
    """
    计算给定投资空间中的所有股票
    技术分析因子值
    """
    
    #----------------------------------------------------------------------
    def __init__(self,logger=None):
        """Constructor"""
        #Create log file
        if logger == None:
            self.logger = LogHandler.LogOutputHandler("ComputeFactorsAndZScores")
        else:    
            self.logger = logger
            
        dbPathProcessedData = GetPath.GetLocalDatabasePath()["EquityDataRefined"]
        self.dbPathProcessedData = dbPathProcessedData
        self.totalTradeDay = GetTrdDay.GetTradeDays()   
        

    #----------------------------------------------------------------------
    def LoadSourceData(self,dbPathMktData,dbPathConstituentStocks):
        """
        读取本地数据库数据
        """
        self.objCalcFactorVals = CalcFactorVals.CalculateFactorValues(dbPathMktData,dbPathConstituentStocks,None,self.logger)
        
    
    #----------------------------------------------------------------------
    def LoadFactorAlgos(self):
        """
        Load algorithem for computing factor values
        """
        self.factorNames = []
        self.factorAlgos = []
        path = RootPath+"\\UpdateFactorDatabase\\TechnicalFactors\\FactorAlgos\\"
        algoFiles = os.listdir(path)
        for algoFile in algoFiles: 
            algoName = algoFile.split('.')
            if algoName[0][0]!='_' and algoName[1]=="py":
                self.logger.info("<{}>-Load factor algo {}".format(__name__.split('.')[-1],algoName[0]))
                self.factorNames.append(algoName[0])
                exec("import UpdateFactorDatabase.TechnicalFactors.FactorAlgos.{} as algo".format(algoName[0]))
                self.factorAlgos.append(algo)
                    
    
    #----------------------------------------------------------------------
    def ComputeAndSaveFactorValues(self,factorDatabaseName,begDate):
        """
        Start to run factor computation
        """
        self.conn = lite.connect(self.dbPathProcessedData+factorDatabaseName+".db")
        self.conn.text_factory = str
        self.cur = self.conn.cursor()
        self.cur.execute("PRAGMA synchronous = OFF")
        self.cur.execute("DROP TABLE IF EXISTS TechnicalFactors")
        sqlStr = ""
        for item in self.factorNames:
            sqlStr+=','+item+" FLOAT"
        self.cur.execute("""
                         CREATE TABLE TechnicalFactors(StkCode TEXT,
                                                       StkName TEXT,
                                                       IndusCode TEXT,
                                                       IndusName TEXT,
                                                       Date TEXT 
                                                       {})
                         """.format(sqlStr))   
        
        insertSql = "?,?,?,?,?"+len(self.factorAlgos)*",?"
        
        allStkCodes = self.objCalcFactorVals.GetAllStockCodes()
        
        n = len(self.factorAlgos)
        numOfThreads = 20
        threads = []
        for i in xrange(numOfThreads):
            if i!=20:
                stks=allStkCodes[i*(len(allStkCodes)/numOfThreads):(i+1)*(len(allStkCodes)/numOfThreads)]
            else:
                stks=allStkCodes[i*(len(allStkCodes)/numOfThreads):]
            t = threading.Thread(target=self._ComputerFactorValue, args=(factorDatabaseName,stks,insertSql,begDate,i))
            threads.append(t)
        for t in threads:
            t.start() 
        for t in threads:
            t.join()
        self.logger.info("<{}>-Create index on table TechnicalFactors".format(__name__.split('.')[-1]))
        self.cur.execute("CREATE INDEX Idt ON TechnicalFactors(StkCode,Date)")
        self.conn.commit()
        
        
    #----------------------------------------------------------------------
    def _ComputerFactorValue(self,factorDatabaseName,stks,insertSql,begDate,threadId):
        """"""
        conn = lite.connect(self.dbPathProcessedData+factorDatabaseName+".db",check_same_thread=False,timeout=10000)
        conn.text_factory = str
        cur = conn.cursor()
        cur.execute("PRAGMA synchronous = OFF")
        
        for stk in stks:
            self.logger.info("<{}>-Compute factor of {} on thread {}".format(__name__.split('.')[-1],stk,threadId))
            vals = self.objCalcFactorVals.Calculate(begDate,stk,self.factorAlgos)
            if type(vals)!=type(None):
                dates = vals[0].index.tolist()
                values = vals[0].values
                info = vals[1].values
                for d in xrange(len(dates)):
                    #stkInfo = self.objConstituentStocks.GetStockNameAndIndustry(stk,dates[d])
                    row = [stk,info[d][0],info[d][2],info[d][3],dates[d]]
                    for v in values[d]:
                        row.append(v)
                    cur.execute("INSERT INTO TechnicalFactors VALUES ({})".format(insertSql),tuple(row))        
        conn.commit()

        
   